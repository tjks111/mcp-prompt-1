{
  "id": "docker-mcp-servers-orchestration",
  "name": "Docker MCP Servers Orchestration Guide",
  "description": "A comprehensive guide for setting up, configuring, and orchestrating multiple MCP servers in a Docker environment",
  "content": "# Docker MCP Servers Orchestration Guide

## Overview

This guide will help you set up a containerized environment with multiple integrated MCP servers for {{use_case}}. The architecture leverages Docker Compose to orchestrate these servers, providing a robust foundation for AI-powered applications with enhanced context capabilities.

## Prerequisites

- Docker and Docker Compose installed
- Basic understanding of containerization concepts
- Git for cloning repositories
- {{additional_prerequisites}}

## Core MCP Servers Architecture

```mermaid
graph TD
    subgraph \"Docker Compose Network\"
        subgraph \"Core Service\"
            MCP[MCP Prompts Server]
        end
        
        subgraph \"MCP Resource Servers\"
            FS[Filesystem Server]
            MEM[Memory Server]
            GH[GitHub Server]
            ST[Sequential Thinking]
            EL[ElevenLabs Server]
            {{additional_servers}}
        end
        
        subgraph \"Storage Options\"
            File[(File Storage)]
            PG[(PostgreSQL)]
            PGAI[(PGAI/TimescaleDB)]
        end
    end
    
    Client[AI Client] -->|Requests| MCP
    MCP -->|Resource URI Requests| FS
    MCP -->|Resource URI Requests| MEM
    MCP -->|Resource URI Requests| GH
    MCP -->|Resource URI Requests| ST
    MCP -->|Resource URI Requests| EL
    
    MCP -->|Storage| File
    MCP -->|Storage| PG
    MCP -->|Storage| PGAI
    
    FS -->|Access| LocalFiles[(Local Files)]
    GH -->|API Calls| GitHub[(GitHub API)]
    EL -->|API Calls| ElevenLabsAPI[(ElevenLabs API)]
    
    classDef core fill:#f9a,stroke:#d87,stroke-width:2px
    classDef server fill:#adf,stroke:#7ad,stroke-width:1px
    classDef storage fill:#ad8,stroke:#7a6,stroke-width:1px
    classDef external fill:#ddd,stroke:#999,stroke-width:1px
    
    class MCP core
    class FS,MEM,GH,ST,EL server
    class File,PG,PGAI storage
    class Client,LocalFiles,GitHub,ElevenLabsAPI external
```

## Setting Up Your Environment

### 1. Base Docker Compose Configuration

Create a base Docker Compose file (`docker-compose.base.yml`):

```yaml
version: '3'

services:
  mcp-prompts:
    image: {{registry}}/mcp-prompts:latest
    container_name: mcp-prompts
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - STORAGE_TYPE=file
      - PROMPTS_DIR=/app/data/prompts
      - BACKUPS_DIR=/app/data/backups
      - LOG_LEVEL=info
    volumes:
      - mcp-data:/app/data
    ports:
      - \"3000:3000\"
    healthcheck:
      test: [\"CMD\", \"node\", \"-e\", \"require('http').request({hostname: 'localhost', port: 3000, path: '/health', timeout: 2000}, (res) => process.exit(res.statusCode !== 200)).end()\"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: bridge

volumes:
  mcp-data:
    name: mcp-data
```

### 2. Resource Servers Configuration

Create an integration configuration file (`docker-compose.integration.yml`):

```yaml
version: '3'

services:
  # Override the base service with integration configuration
  mcp-prompts:
    environment:
      - MCP_INTEGRATION=true
      - MCP_MEMORY_URL=http://mcp-memory:3000
      - MCP_FILESYSTEM_URL=http://mcp-filesystem:3000
      - MCP_GITHUB_URL=http://mcp-github:3000
      - MCP_THINKING_URL=http://mcp-sequential-thinking:3000
      - MCP_ELEVENLABS_URL=http://mcp-elevenlabs:3000
    depends_on:
      - mcp-memory
      - mcp-filesystem
      - mcp-github
      - mcp-sequential-thinking
      - mcp-elevenlabs

  # MCP Memory Server
  mcp-memory:
    image: node:20-alpine
    container_name: mcp-memory
    command: sh -c \"npm install -g @modelcontextprotocol/server-memory && npx -y @modelcontextprotocol/server-memory\"
    ports:
      - \"3020:3000\"
    restart: unless-stopped
    networks:
      - mcp-network

  # MCP Filesystem Server
  mcp-filesystem:
    image: node:20-alpine
    container_name: mcp-filesystem
    command: sh -c \"npm install -g @modelcontextprotocol/server-filesystem && npx -y @modelcontextprotocol/server-filesystem /data\"
    volumes:
      - mcp-filesystem-data:/data
    ports:
      - \"3021:3000\"
    restart: unless-stopped
    networks:
      - mcp-network

  # MCP GitHub Server
  mcp-github:
    image: node:20-alpine
    container_name: mcp-github
    command: sh -c \"npm install -g @modelcontextprotocol/server-github && npx -y @modelcontextprotocol/server-github\"
    environment:
      - GITHUB_PERSONAL_ACCESS_TOKEN={{github_token}}
    ports:
      - \"3022:3000\"
    restart: unless-stopped
    networks:
      - mcp-network

  # MCP Sequential Thinking Server
  mcp-sequential-thinking:
    image: node:20-alpine
    container_name: mcp-sequential-thinking
    command: sh -c \"npm install -g @modelcontextprotocol/server-sequential-thinking && npx -y @modelcontextprotocol/server-sequential-thinking\"
    ports:
      - \"3023:3000\"
    restart: unless-stopped
    networks:
      - mcp-network

  # MCP ElevenLabs Server
  mcp-elevenlabs:
    image: node:20-alpine
    container_name: mcp-elevenlabs
    command: sh -c \"npm install -g elevenlabs-mcp-server && npx -y elevenlabs-mcp-server\"
    environment:
      - ELEVENLABS_API_KEY={{elevenlabs_api_key}}
      - ELEVENLABS_VOICE_ID={{elevenlabs_voice_id}}
      - ELEVENLABS_MODEL_ID={{elevenlabs_model_id}}
      - ELEVENLABS_OUTPUT_DIR=/data/audio
    volumes:
      - mcp-elevenlabs-data:/data
    ports:
      - \"3024:3000\"
    restart: unless-stopped
    networks:
      - mcp-network

volumes:
  mcp-filesystem-data:
    name: mcp-filesystem-data
  mcp-elevenlabs-data:
    name: mcp-elevenlabs-data
```

### 3. Storage Options

#### File Storage (Default)
Uses the default file storage mounted as a Docker volume.

#### PostgreSQL Storage
Create a PostgreSQL configuration file (`docker-compose.postgres.yml`):

```yaml
version: '3'

services:
  # Override the base service to use PostgreSQL
  mcp-prompts:
    environment:
      - STORAGE_TYPE=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER={{postgres_user}}
      - POSTGRES_PASSWORD={{postgres_password}}
      - POSTGRES_DATABASE={{postgres_database}}
    depends_on:
      postgres:
        condition: service_healthy

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: mcp-prompts-postgres
    environment:
      - POSTGRES_USER={{postgres_user}}
      - POSTGRES_PASSWORD={{postgres_password}}
      - POSTGRES_DB={{postgres_database}}
    volumes:
      - mcp-prompts-postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - \"5432:5432\"
    healthcheck:
      test: [\"CMD-SHELL\", \"pg_isready -U {{postgres_user}}\"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - mcp-network

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: mcp-prompts-adminer
    ports:
      - \"8080:8080\"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - mcp-network

volumes:
  mcp-prompts-postgres-data:
    name: mcp-prompts-postgres-data
```

#### PGAI/TimescaleDB (Vector Storage)
Create a PGAI configuration file (`docker-compose.pgai.yml`):

```yaml
version: '3'

services:
  # Override the base service to use PGAI
  mcp-prompts:
    environment:
      - STORAGE_TYPE=pgai
      - PGAI_HOST=pgai
      - PGAI_PORT=5432
      - PGAI_USER=postgres
      - PGAI_PASSWORD=postgres
      - PGAI_DATABASE=mcp_prompts
      - PGAI_API_KEY={{pgai_api_key}}
      - PGAI_COLLECTION=mcp_prompts
    depends_on:
      pgai:
        condition: service_healthy

  # TimescaleDB with PGAI extension
  pgai:
    image: timescale/timescaledb-pgai:pg15
    container_name: mcp-prompts-pgai
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=mcp_prompts
    volumes:
      - mcp-prompts-pgai-data:/var/lib/postgresql/data
      - ./postgres/pgai-init:/docker-entrypoint-initdb.d
    ports:
      - \"5433:5432\"
    healthcheck:
      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - mcp-network

  # Adminer for PGAI database management
  pgai-adminer:
    image: adminer:latest
    container_name: mcp-prompts-pgai-adminer
    ports:
      - \"8081:8080\"
    environment:
      - ADMINER_DEFAULT_SERVER=pgai
    depends_on:
      - pgai
    restart: unless-stopped
    networks:
      - mcp-network

volumes:
  mcp-prompts-pgai-data:
    name: mcp-prompts-pgai-data
```

## Deployment and Management

### Docker Compose Manager Script

Create a management script (`docker-compose-manager.sh`) for easier orchestration:

```bash
#!/bin/bash

# Colors for output
GREEN=\"\\033[0;32m\"
YELLOW=\"\\033[1;33m\"
BLUE=\"\\033[0;34m\"
RED=\"\\033[0;31m\"
NC=\"\\033[0m\" # No Color

# Base directory for Docker Compose files
COMPOSE_DIR=\"docker/compose\"
BASE_COMPOSE=\"$COMPOSE_DIR/docker-compose.base.yml\"

# Display help message
function show_help {
  echo -e \"${BLUE}MCP Prompts Docker Compose Manager${NC}\"
  echo -e \"${YELLOW}Usage:${NC} $0 [command] [environment] [options]\"
  echo
  echo -e \"${YELLOW}Commands:${NC}\"
  echo -e \"  up        Start services\"
  echo -e \"  down      Stop services and remove containers\"
  echo -e \"  ps        List running services\"
  echo -e \"  logs      View logs\"
  echo -e \"  restart   Restart services\"
  echo -e \"  image     Build Docker images\"
  echo -e \"  publish   Build and publish Docker images\"
  echo
  echo -e \"${YELLOW}Environments:${NC}\"
  echo -e \"  base       Base MCP Prompts service\"
  echo -e \"  development Development environment with hot-reloading\"
  echo -e \"  postgres   PostgreSQL storage\"
  echo -e \"  pgai       PGAI TimescaleDB storage\"
  echo -e \"  test       Testing environment\"
  echo -e \"  integration Multiple MCP servers integration\"
  echo -e \"  sse        Server-Sent Events transport\"
  echo
  echo -e \"${YELLOW}Options:${NC}\"
  echo -e \"  -d, --detach     Run in detached mode\"
  echo -e \"  -t, --tag TAG    Specify tag for Docker images\"
  echo -e \"  -h, --help       Show this help message\"
}

# Default values
DETACHED=\"\"
TAG=\"latest\"

# Parse options
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      show_help
      exit 0
      ;;
    -d|--detach)
      DETACHED=\"-d\"
      shift
      ;;
    -t|--tag)
      TAG=\"$2\"
      shift 2
      ;;
    *)
      break
      ;;
  esac
done

# Check if at least command and environment are provided
if [ $# -lt 2 ]; then
  show_help
  exit 1
fi

COMMAND=$1
ENV=$2

# Validate environment
COMPOSE_FILE=\"\"
case $ENV in
  base)
    COMPOSE_FILE=\"$BASE_COMPOSE\"
    ;;
  development)
    COMPOSE_FILE=\"-f $BASE_COMPOSE -f $COMPOSE_DIR/docker-compose.development.yml\"
    ;;
  postgres)
    COMPOSE_FILE=\"-f $BASE_COMPOSE -f $COMPOSE_DIR/docker-compose.postgres.yml\"
    ;;
  pgai)
    COMPOSE_FILE=\"-f $BASE_COMPOSE -f $COMPOSE_DIR/docker-compose.pgai.yml\"
    ;;
  test)
    COMPOSE_FILE=\"-f $BASE_COMPOSE -f $COMPOSE_DIR/docker-compose.test.yml\"
    ;;
  integration)
    COMPOSE_FILE=\"-f $BASE_COMPOSE -f $COMPOSE_DIR/docker-compose.integration.yml\"
    ;;
  sse)
    COMPOSE_FILE=\"-f $BASE_COMPOSE -f $COMPOSE_DIR/docker-compose.sse.yml\"
    ;;
  *)
    echo -e \"${RED}Invalid environment: $ENV${NC}\"
    show_help
    exit 1
    ;;
esac

# Execute the appropriate command
case $COMMAND in
  up)
    echo -e \"${GREEN}Starting MCP Prompts services for environment: $ENV${NC}\"
    docker compose $COMPOSE_FILE up $DETACHED
    ;;
  down)
    echo -e \"${GREEN}Stopping MCP Prompts services for environment: $ENV${NC}\"
    docker compose $COMPOSE_FILE down
    ;;
  ps)
    echo -e \"${GREEN}Listing MCP Prompts services for environment: $ENV${NC}\"
    docker compose $COMPOSE_FILE ps
    ;;
  logs)
    echo -e \"${GREEN}Showing logs for MCP Prompts services in environment: $ENV${NC}\"
    docker compose $COMPOSE_FILE logs -f
    ;;
  restart)
    echo -e \"${GREEN}Restarting MCP Prompts services for environment: $ENV${NC}\"
    docker compose $COMPOSE_FILE restart
    ;;
  image)
    echo -e \"${GREEN}Building Docker image for environment: $ENV with tag: $TAG${NC}\"
    case $ENV in
      base|production)
        docker build -t {{registry}}/mcp-prompts:$TAG -f docker/Dockerfile.prod .
        echo -e \"${GREEN}Built: {{registry}}/mcp-prompts:$TAG${NC}\"
        ;;
      development)
        docker build -t {{registry}}/mcp-prompts:$TAG-dev -f docker/Dockerfile.development .
        echo -e \"${GREEN}Built: {{registry}}/mcp-prompts:$TAG-dev${NC}\"
        ;;
      test)
        docker build -t {{registry}}/mcp-prompts:$TAG-test -f docker/Dockerfile.testing .
        echo -e \"${GREEN}Built: {{registry}}/mcp-prompts:$TAG-test${NC}\"
        ;;
      *)
        echo -e \"${RED}Image building not supported for environment: $ENV${NC}\"
        exit 1
        ;;
    esac
    ;;
  publish)
    echo -e \"${GREEN}Building and publishing Docker images with tag: $TAG${NC}\"
    
    # Build images
    docker build -t {{registry}}/mcp-prompts:$TAG -f docker/Dockerfile.prod .
    docker build -t {{registry}}/mcp-prompts:$TAG-dev -f docker/Dockerfile.development .
    docker build -t {{registry}}/mcp-prompts:$TAG-test -f docker/Dockerfile.testing .
    
    # Push images
    echo -e \"${GREEN}Publishing images to Docker registry${NC}\"
    docker push {{registry}}/mcp-prompts:$TAG
    docker push {{registry}}/mcp-prompts:$TAG-dev
    docker push {{registry}}/mcp-prompts:$TAG-test
    
    echo -e \"${GREEN}Published images:${NC}\"
    echo -e \"  {{registry}}/mcp-prompts:$TAG\"
    echo -e \"  {{registry}}/mcp-prompts:$TAG-dev\"
    echo -e \"  {{registry}}/mcp-prompts:$TAG-test\"
    ;;
  *)
    echo -e \"${RED}Invalid command: $COMMAND${NC}\"
    show_help
    exit 1
    ;;
esac
```

Make the script executable:

```bash
chmod +x docker-compose-manager.sh
```

## Launching the Environment

### 1. Start the Base Environment

```bash
./docker-compose-manager.sh up base -d
```

### 2. Start with MCP Integration

```bash
./docker-compose-manager.sh up integration -d
```

### 3. Start with PostgreSQL Storage

```bash
./docker-compose-manager.sh up postgres -d
```

### 4. Start with PGAI Vector Storage

```bash
./docker-compose-manager.sh up pgai -d
```

## Environment Configuration

### Core Services Configuration

1. **MCP Prompts Server Configuration**
   ```
   # Server Configuration
   PORT=3000
   HOST=0.0.0.0
   NODE_ENV=production
   LOG_LEVEL=info
   
   # Storage Configuration
   STORAGE_TYPE=file  # Options: file, postgres, pgai
   PROMPTS_DIR=/app/data/prompts
   BACKUPS_DIR=/app/data/backups
   
   # Integration Configuration
   MCP_INTEGRATION=true
   MCP_MEMORY_URL=http://mcp-memory:3000
   MCP_FILESYSTEM_URL=http://mcp-filesystem:3000
   MCP_GITHUB_URL=http://mcp-github:3000
   MCP_THINKING_URL=http://mcp-sequential-thinking:3000
   MCP_ELEVENLABS_URL=http://mcp-elevenlabs:3000
   ```

2. **GitHub Integration**
   ```
   # GitHub API Configuration
   GITHUB_PERSONAL_ACCESS_TOKEN=your_token_here
   ```

3. **ElevenLabs Integration**
   ```
   # ElevenLabs API Configuration
   ELEVENLABS_API_KEY=your_api_key_here
   ELEVENLABS_VOICE_ID=your_voice_id
   ELEVENLABS_MODEL_ID=eleven_monolingual_v1
   ELEVENLABS_OUTPUT_DIR=/data/audio
   ```

### PostgreSQL Configuration

```
# PostgreSQL Configuration
POSTGRES_USER=postgres
POSTGRES_PASSWORD=secure_password_here
POSTGRES_DATABASE=mcp_prompts
```

### PGAI/TimescaleDB Configuration

```
# PGAI Configuration
PGAI_HOST=pgai
PGAI_PORT=5432
PGAI_USER=postgres
PGAI_PASSWORD=postgres
PGAI_DATABASE=mcp_prompts
PGAI_API_KEY=your_pgai_key_here
PGAI_COLLECTION=mcp_prompts
```

## Integration Verification

### 1. Health Check

Check if all services are running:

```bash
./docker-compose-manager.sh ps integration
```

### 2. Test MCP Prompts Server

```bash
curl http://localhost:3000/health
```

### 3. Test Resource Servers

```bash
# Test Memory Server
curl http://localhost:3020/health

# Test Filesystem Server
curl http://localhost:3021/health

# Test GitHub Server
curl http://localhost:3022/health

# Test Sequential Thinking Server
curl http://localhost:3023/health

# Test ElevenLabs Server
curl http://localhost:3024/health
```

## Troubleshooting Common Issues

### Container Startup Issues

1. **Container fails to start**
   - Check logs: `./docker-compose-manager.sh logs integration`
   - Verify environment variables are correctly set
   - Ensure ports are not already in use

2. **Network connectivity issues**
   - Verify all containers are on the same network
   - Check Docker network configuration: `docker network inspect mcp-network`

3. **Storage issues**
   - Ensure volume permissions are correctly set
   - Verify database initialization scripts are valid

## Resource Management

### Clean Up Unused Resources

```bash
# Remove stopped containers
docker container prune

# Remove unused volumes
docker volume prune

# Remove unused networks
docker network prune

# Remove dangling images
docker image prune
```

### Data Persistence

Docker volumes ensure your data persists across container restarts:

```
volumes:
  mcp-data:              # MCP Prompts data
  mcp-filesystem-data:   # Filesystem server data
  mcp-elevenlabs-data:   # Audio output data
  mcp-prompts-postgres-data:  # PostgreSQL data
  mcp-prompts-pgai-data:      # PGAI/TimescaleDB data
```

## Best Practices for Production

1. **Security Considerations**
   - Use environment files for secrets
   - Configure proper network isolation
   - Set up user permissions for service accounts
   - Enable HTTPS with proper certificates

2. **High Availability**
   - Implement container restart policies
   - Consider Docker Swarm or Kubernetes for clustering
   - Set up monitoring and alerting
   - Establish backup and recovery procedures

3. **Performance Optimization**
   - Tune PostgreSQL/PGAI for your workload
   - Configure appropriate resource limits
   - Implement caching strategies
   - Monitor resource usage

## Advanced Customization

### Adding Custom MCP Servers

1. Create a Dockerfile for your custom server
2. Add the service to your Docker Compose file
3. Configure environment variables for integration
4. Update the MCP Prompts server configuration

### Extending with Additional Services

```yaml
services:
  # Your custom MCP server
  mcp-custom:
    image: node:20-alpine
    container_name: mcp-custom
    command: sh -c \"npm install -g your-custom-mcp-server && npx -y your-custom-mcp-server\"
    environment:
      - CUSTOM_API_KEY={{custom_api_key}}
    ports:
      - \"3025:3000\"
    restart: unless-stopped
    networks:
      - mcp-network
```

## Next Steps

1. Explore integration with AI clients like Claude Desktop, Zed, and LibreChat
2. Implement monitoring and logging solutions
3. Set up CI/CD pipelines for deployment
4. Explore advanced use cases for your specific domain

## Additional Resources

- [MCP Protocol Documentation](https://modelcontextprotocol.io/)
- [Docker Documentation](https://docs.docker.com/)
- [MCP Servers Repository](https://github.com/modelcontextprotocol/servers)
- {{additional_resources}}

What specific aspect of this Docker-based MCP integration would you like me to elaborate on further?",
  "isTemplate": true,
  "variables": [
    "use_case",
    "additional_prerequisites",
    "additional_servers",
    "registry",
    "github_token",
    "elevenlabs_api_key",
    "elevenlabs_voice_id",
    "elevenlabs_model_id",
    "postgres_user",
    "postgres_password",
    "postgres_database",
    "pgai_api_key",
    "custom_api_key",
    "additional_resources"
  ],
  "tags": [
    "docker",
    "mcp-integration",
    "multi-server",
    "orchestration",
    "containerization",
    "devops",
    "tutorial"
  ],
  "createdAt": "2025-03-15T21:00:00.000Z",
  "updatedAt": "2025-03-15T21:00:00.000Z",
  "version": 1,
  "metadata": {
    "recommended_servers": [
      "@modelcontextprotocol/server-filesystem",
      "@modelcontextprotocol/server-memory",
      "@modelcontextprotocol/server-github",
      "@modelcontextprotocol/server-sequential-thinking",
      "elevenlabs-mcp-server"
    ],
    "example_values": {
      "use_case": "AI-powered code analysis and documentation",
      "additional_prerequisites": "Node.js 18+ for local development",
      "registry": "sparesparrow",
      "postgres_user": "postgres",
      "postgres_password": "secure_password_here",
      "postgres_database": "mcp_prompts"
    }
  }
} 