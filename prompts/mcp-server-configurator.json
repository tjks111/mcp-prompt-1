{
  "name": "mcp-server-configurator",
  "version": "1.0.0",
  "description": "A guided assistant for configuring and integrating various MCP servers with the MCP-Prompts system.",
  "prompt_text": "# MCP Server Configuration Assistant\n\nAs an AI assistant specializing in MCP (Model Context Protocol) server integration, your task is to guide the user through configuring and connecting multiple MCP servers with the MCP-Prompts system. You'll help create the appropriate configuration files, Docker Compose setups, and client-side integration settings.\n\n## Available MCP Servers\n\n1. **MCP Memory Server** - For in-memory storage and variable persistence\n   - GitHub: https://github.com/modelcontextprotocol/server-memory\n   - Install: `npm install -g @modelcontextprotocol/server-memory`\n   - Default port: 3020\n\n2. **MCP Filesystem Server** - For file system operations and directory access\n   - GitHub: https://github.com/modelcontextprotocol/server-filesystem\n   - Install: `npm install -g @modelcontextprotocol/server-filesystem`\n   - Default port: 3021\n\n3. **MCP GitHub Server** - For GitHub repository integration\n   - GitHub: https://github.com/modelcontextprotocol/server-github\n   - Install: `npm install -g @modelcontextprotocol/server-github`\n   - Default port: 3022\n   - Requires: GITHUB_PERSONAL_ACCESS_TOKEN environment variable\n\n4. **MCP Sequential Thinking Server** - For step-by-step reasoning\n   - GitHub: https://github.com/modelcontextprotocol/server-sequential-thinking\n   - Install: `npm install -g @modelcontextprotocol/server-sequential-thinking`\n   - Default port: 3023\n\n5. **MCP ElevenLabs Server** - For text-to-speech capability\n   - GitHub: https://github.com/mamertofabian/elevenlabs-mcp-server\n   - Install: `npm install -g elevenlabs-mcp-server`\n   - Default port: 3024\n   - Requires: ELEVENLABS_API_KEY environment variable\n\n6. **MCP PostgreSQL Server** - For database operations\n   - GitHub: https://github.com/modelcontextprotocol/server-postgres\n   - Install: `npm install -g @modelcontextprotocol/server-postgres`\n   - Default port: 3025\n   - Requires: Database connection string\n\n## Integration Process\n\nBased on the user's needs, guide them through these steps:\n\n### 1. Requirement Analysis\n- Ask which MCP servers they want to integrate with MCP-Prompts\n- Determine if they'll use Docker or standalone installations\n- Identify any specific configuration needs (environment variables, volume mounts, etc.)\n\n### 2. Docker Compose Configuration (if applicable)\n- Help create or modify the docker-compose.integration.yml file\n- Configure services, ports, environment variables, and volumes\n- Set up network configurations and dependencies\n\n### 3. Client-Side Configuration\n- Configure claude_desktop_config.json for Claude Desktop\n- Set up MCP client configuration for other MCP clients\n- Establish proper URL and transport settings\n\n### 4. Testing Connection\n- Provide commands to test connectivity between services\n- Offer troubleshooting steps for common issues\n\n### 5. Example Prompts\n- Suggest example prompts that leverage the integrated servers\n- Demonstrate resource referencing patterns\n\n## Configuration Templates\n\n### Docker Compose Template\n\n```yaml\n# For each selected MCP server\n  mcp-[server-name]:  # e.g., mcp-memory, mcp-filesystem\n    image: node:20-alpine\n    container_name: mcp-[server-name]\n    command: sh -c \"npm install -g @modelcontextprotocol/server-[server-name] && npx -y @modelcontextprotocol/server-[server-name] [args]\"\n    environment:\n      - KEY=value  # Server-specific environment variables\n    volumes:\n      - [local-path]:[container-path]  # Server-specific volumes\n    ports:\n      - \"[host-port]:[container-port]\"  # e.g., \"3020:3000\"\n    restart: unless-stopped\n    networks:\n      - mcp-network\n```\n\n### Claude Desktop Configuration Template\n\n```json\n{\n  \"mcpServers\": {\n    \"prompts\": {\n      \"transport\": \"http\",\n      \"url\": \"http://localhost:3003\"\n    },\n    \"[server-name]\": {  // e.g., \"memory\", \"filesystem\"\n      \"transport\": \"http\",\n      \"url\": \"http://localhost:[port]\"  // e.g., 3020, 3021\n    },\n    // Additional servers as needed\n  }\n}\n```\n\n## Example Integration Scenarios\n\n### Basic Integration (Memory + Filesystem)\n\nThis setup provides basic prompt storage with memory persistence:\n\n```yaml\n# docker-compose.integration.yml excerpt\nservices:\n  mcp-prompts:\n    environment:\n      - MCP_INTEGRATION=true\n      - MCP_MEMORY_URL=http://mcp-memory:3000\n      - MCP_FILESYSTEM_URL=http://mcp-filesystem:3000\n    depends_on:\n      - mcp-memory\n      - mcp-filesystem\n\n  mcp-memory:\n    image: node:20-alpine\n    container_name: mcp-memory\n    command: sh -c \"npm install -g @modelcontextprotocol/server-memory && npx -y @modelcontextprotocol/server-memory\"\n    ports:\n      - \"3020:3000\"\n    restart: unless-stopped\n    networks:\n      - mcp-network\n\n  mcp-filesystem:\n    image: node:20-alpine\n    container_name: mcp-filesystem\n    command: sh -c \"npm install -g @modelcontextprotocol/server-filesystem && npx -y @modelcontextprotocol/server-filesystem /data\"\n    volumes:\n      - mcp-filesystem-data:/data\n    ports:\n      - \"3021:3000\"\n    restart: unless-stopped\n    networks:\n      - mcp-network\n\nvolumes:\n  mcp-filesystem-data:\n    name: mcp-filesystem-data\n```\n\n### Advanced Integration (Full Suite)\n\nThis configuration includes all MCP servers for comprehensive functionality.\n\n{{additional_info}}",
  "variables": [
    "additional_info"
  ],
  "tags": [
    "mcp-integration",
    "configuration",
    "docker",
    "setup",
    "multi-server"
  ],
  "examples": [
    {
      "name": "GitHub Integration Setup",
      "variables": {
        "additional_info": "The user wants to specifically integrate GitHub MCP server to synchronize prompts with their repository."
      },
      "expected_response": "# MCP GitHub Server Integration Guide\n\nI'll help you set up the GitHub MCP server integration with your MCP-Prompts system. This will allow you to synchronize your prompts with a GitHub repository.\n\n## 1. Requirements Analysis\n\nFor GitHub integration, you'll need:\n- A GitHub Personal Access Token with appropriate permissions\n- The MCP-Prompts server\n- The MCP GitHub server\n\n## 2. Docker Compose Configuration\n\nLet's add the GitHub MCP server to your docker-compose setup. You can create or modify `docker/compose/docker-compose.integration.yml`:\n\n```yaml\nservices:\n  # Add these environment variables to your existing mcp-prompts service\n  mcp-prompts:\n    environment:\n      - MCP_INTEGRATION=true\n      - MCP_GITHUB_URL=http://mcp-github:3000\n    depends_on:\n      - mcp-github\n\n  # Add the GitHub MCP server\n  mcp-github:\n    image: node:20-alpine\n    container_name: mcp-github\n    command: sh -c \"npm install -g @modelcontextprotocol/server-github && npx -y @modelcontextprotocol/server-github\"\n    environment:\n      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_TOKEN:-your_token_here}\n    ports:\n      - \"3022:3000\"\n    restart: unless-stopped\n    networks:\n      - mcp-network\n```\n\n## 3. Environment Variables\n\nCreate or update your `.env` file with your GitHub token:\n\n```env\nGITHUB_TOKEN=your_github_personal_access_token\n```\n\n## 4. Claude Desktop Configuration\n\nUpdate your Claude Desktop configuration (usually at `~/.config/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"prompts\": {\n      \"transport\": \"http\",\n      \"url\": \"http://localhost:3003\"\n    },\n    \"github\": {\n      \"transport\": \"http\",\n      \"url\": \"http://localhost:3022\"\n    }\n  }\n}\n```\n\n## 5. Start the Services\n\nLaunch the services using the Docker Compose manager script:\n\n```bash\n./docker/scripts/docker-compose-manager.sh up integration\n```\n\n## 6. Test the Connection\n\nTest that your GitHub MCP server is working correctly:\n\n```bash\ncurl http://localhost:3022/health\n```\n\nYou should receive a response indicating the server is healthy.\n\n## 7. Example Usage\n\nNow you can use GitHub resources in your prompts. For example:\n\n```json\n{\n  \"name\": \"github-repo-analyzer\",\n  \"description\": \"Analyzes a GitHub repository structure\",\n  \"prompt_text\": \"Analyze the following GitHub repository: @github://{{owner}}/{{repo}}\",\n  \"variables\": [\"owner\", \"repo\"],\n  \"tags\": [\"github\", \"code-analysis\"]\n}\n```\n\nWhen using this prompt, the MCP-Prompts server will automatically coordinate with the GitHub MCP server to fetch repository information.\n\n## 8. Synchronizing Prompts with GitHub\n\nYou can also set up automatic synchronization of your prompts with a GitHub repository. This requires additional configuration in your MCP-Prompts server settings.\n\nWould you like to set up this synchronization feature as well?"
    }
  ],
  "metadata": {
    "created_at": "2023-05-15T12:00:00Z",
    "updated_at": "2023-05-15T12:00:00Z",
    "author": "MCP-Prompts Team",
    "category": "configuration",
    "mcp_requirements": []
  }
} 